From aea85a5230e05eb01657437228d1f9dab5e8061d Mon Sep 17 00:00:00 2001
From: Bins94 <kaipeng94@gmail.com>
Date: Sun, 24 Nov 2019 21:41:44 -0500
Subject: [PATCH 2/6] Add coverage filter

---
 executor/cov_filter.h | 40 ++++++++++++++++++++++++++++++++++++++++
 executor/executor.cc  | 12 ++++++++++++
 2 files changed, 52 insertions(+)
 create mode 100644 executor/cov_filter.h

diff --git a/executor/cov_filter.h b/executor/cov_filter.h
new file mode 100644
index 00000000..726db4b3
--- /dev/null
+++ b/executor/cov_filter.h
@@ -0,0 +1,40 @@
+typedef unsigned int uint32;
+
+struct code_region {
+        uint32 start;
+        uint32 end;
+};
+
+/* Address of kernel function for filtering coverage signal */
+static struct code_region white_list[] = {
+        // do_mmap
+        {.start = 0x81757755, .end = 0x81758690},
+        //tcp_v6_init_sock
+        {.start = 0x8294f438, .end = 0x8294f438},
+        //tcp_v6_connect
+        {.start = 0x82954272, .end = 0x829608c3},
+	//tcp_sendmsg_locked
+	{.start = 0x8269ced5, .end = 0x826a06b4},
+	//tcp_recvmsg
+	{.start = 0x826912ae, .end = 0x826941c1},
+	//tcp_close
+	{.start = 0x826a1053, .end = 0x826a1e4f},
+	//tcp_shutdown
+	{.start = 0x8268d7d0, .end = 0x8268d8ad},
+	//do_tcp_setsockopt
+	{.start = 0x82697629, .end = 0x82699833},
+	//do_tcp_getsockopt
+	{.start = 0x8268da50, .end = 0x82690af4},
+	//inet_accept
+	{.start = 0x8277b5f0, .end = 0x8277bb82},
+	//inet_listen
+	{.start = 0x8277ccde, .end = 0x8277d293},
+	//tcp_ioctl
+	{.start = 0x82699e2a, .end = 0x8269a444},
+	//__inet6_bind
+	{.start = 0x82869017, .end = 0x8286a8be},
+	//inet6_getname
+	{.start = 0x828658df, .end = 0x82865e9d},
+	//inet6_ioctl
+	{.start = 0x82866292, .end = 0x82866461},
+};
diff --git a/executor/executor.cc b/executor/executor.cc
index 21373a4c..c9cc34a4 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -16,6 +16,7 @@
 #include <unistd.h>
 
 #include "defs.h"
+#include "cov_filter.h"
 
 #if defined(__GNUC__)
 #define SYSCALLAPI
@@ -870,6 +871,15 @@ thread_t* schedule_call(int call_index, int call_num, bool colliding, uint64 cop
 }
 
 #if SYZ_EXECUTOR_USES_SHMEM
+bool cover_filter(uint32 pc)
+{
+        for (uint32 i = 0; i < (sizeof(white_list) / sizeof(uint64)); i++) {
+                if ((pc >= white_list[i].start) && (pc <= white_list[i].end))
+                        return true;
+	}
+	return false;
+}
+
 template <typename cover_data_t>
 void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover_count_pos, int monpipe)
 {
@@ -911,6 +921,8 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 		prev = hash(pc);
 		if (dedup(sig))
 			continue;
+		if (!cover_filter(pc))
+		        continue;
 		sig |= 0xd000000000000000;
 		write_output64(sig & COVERAGE_SIG_MASK);
 		nsig++;
-- 
2.20.1

