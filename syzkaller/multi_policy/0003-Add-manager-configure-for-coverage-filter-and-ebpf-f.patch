From 6f2595c08f2bc164fb18ab33ab5d3ce5c2ca8d1c Mon Sep 17 00:00:00 2001
From: Bins94 <kaipeng94@gmail.com>
Date: Sun, 24 Nov 2019 21:57:42 -0500
Subject: [PATCH 3/6] Add manager configure for coverage filter and ebpf
 feedback

---
 executor/executor.cc         | 16 +++++++++++-----
 pkg/instance/instance.go     | 12 ++++++------
 pkg/ipc/ipc.go               |  2 ++
 pkg/mgrconfig/config.go      |  6 ++++++
 pkg/mgrconfig/load.go        |  2 ++
 syz-fuzzer/fuzzer.go         |  8 ++++++++
 syz-manager/manager.go       |  2 +-
 tools/syz-runtest/runtest.go |  2 +-
 8 files changed, 37 insertions(+), 13 deletions(-)

diff --git a/executor/executor.cc b/executor/executor.cc
index c9cc34a4..28f0bdb1 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -125,6 +125,8 @@ static bool flag_enable_net_dev;
 static bool flag_enable_net_reset;
 static bool flag_enable_cgroups;
 static bool flag_enable_close_fds;
+static bool flag_enable_cover_filter;
+static bool flag_enable_ebpf_signal;
 static bool flag_enable_devlink_pci;
 
 static bool flag_collect_cover;
@@ -491,6 +493,8 @@ void parse_env_flags(uint64 flags)
 	flag_enable_cgroups = flags & (1 << 9);
 	flag_enable_close_fds = flags & (1 << 10);
 	flag_enable_devlink_pci = flags & (1 << 11);
+	flag_enable_cover_filter = flags & (1 << 15);
+	flag_enable_ebpf_signal = flags & (1 << 16);
 }
 
 #if SYZ_EXECUTOR_USES_FORK_SERVER
@@ -904,10 +908,12 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 			/* state signal start with 0xf
                         * Write out real state for fuzzer's further handle
                         */
-			write_output64(state);
-			debug("A state signal %016lx\n", state);
-			n = 0;
-			nsig++;
+			if (flag_enable_ebpf_signal) {
+			        write_output64(state);
+				debug("A state signal %016lx\n", state);
+				n = 0;
+				nsig++;
+			}
 		}
 		n++;
 	}
@@ -921,7 +927,7 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 		prev = hash(pc);
 		if (dedup(sig))
 			continue;
-		if (!cover_filter(pc))
+		if (flag_enable_cover_filter && !cover_filter(pc))
 		        continue;
 		sig |= 0xd000000000000000;
 		write_output64(sig & COVERAGE_SIG_MASK);
diff --git a/pkg/instance/instance.go b/pkg/instance/instance.go
index b3e24aac..d73e7174 100644
--- a/pkg/instance/instance.go
+++ b/pkg/instance/instance.go
@@ -299,7 +299,7 @@ func (inst *inst) testInstance() error {
 	}
 
 	cmd := OldFuzzerCmd(fuzzerBin, executorBin, "test", inst.cfg.TargetOS, inst.cfg.TargetArch, fwdAddr,
-		inst.cfg.Sandbox, 0, inst.cfg.Cover, true)
+		inst.cfg.Sandbox, 0, inst.cfg.Cover, true, false, false)
 	outc, errc, err := inst.vm.Run(10*time.Minute, nil, cmd)
 	if err != nil {
 		return fmt.Errorf("failed to run binary in VM: %v", err)
@@ -398,7 +398,7 @@ func (inst *inst) testProgram(command string, testTime time.Duration) error {
 }
 
 func FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs, verbosity int,
-	cover, debug, test, runtest bool) string {
+	cover, debug, test, runtest bool, covfilter bool, ebpfsig bool) string {
 	osArg := ""
 	switch OS {
 	case "akaros", "fuchsia":
@@ -416,13 +416,13 @@ func FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs,
 		verbosityArg = fmt.Sprintf(" -vv=%v", verbosity)
 	}
 	return fmt.Sprintf("%v -executor=%v -name=%v -arch=%v%v -manager=%v -sandbox=%v"+
-		" -procs=%v -cover=%v -debug=%v -test=%v%v%v",
+		" -procs=%v -cover=%v -debug=%v -test=%v%v%v -covfilter=%v -ebpfsig=%v",
 		fuzzer, executor, name, arch, osArg, fwdAddr, sandbox,
-		procs, cover, debug, test, runtestArg, verbosityArg)
+		procs, cover, debug, test, runtestArg, verbosityArg, covfilter, ebpfsig)
 }
 
-func OldFuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs int, cover, test bool) string {
-	return FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox, procs, 0, cover, false, test, false)
+func OldFuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs int, cover, test bool, covfilter bool, ebpfsig bool) string {
+	return FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox, procs, 0, cover, false, test, false, covfilter, ebpfsig)
 }
 
 func ExecprogCmd(execprog, executor, OS, arch, sandbox string, repeat, threaded, collide bool,
diff --git a/pkg/ipc/ipc.go b/pkg/ipc/ipc.go
index c8dadaa7..2a05696c 100644
--- a/pkg/ipc/ipc.go
+++ b/pkg/ipc/ipc.go
@@ -41,6 +41,8 @@ const (
 	// Executor does not know about these:
 	FlagUseShmem      // use shared memory instead of pipes for communication
 	FlagUseForkServer // use extended protocol with handshake
+	FlagCoverFilter
+	FlagEbpfSignal
 )
 
 // Per-exec flags for ExecOpts.Flags:
diff --git a/pkg/mgrconfig/config.go b/pkg/mgrconfig/config.go
index ea03c429..70604d1e 100644
--- a/pkg/mgrconfig/config.go
+++ b/pkg/mgrconfig/config.go
@@ -68,7 +68,13 @@ type Config struct {
 
 	// Use KCOV coverage (default: true).
 	Cover bool `json:"cover"`
+
+	/* Use coverage filter */
+	Covfilter bool `json:"covfilter"`
+	/* Use ebpf feedback */
+	Ebpfsig bool `json:"ebpfsig"`
 	// Reproduce, localize and minimize crashers (default: true).
+
 	Reproduce bool `json:"reproduce"`
 
 	// List of syscalls to test (optional). For example:
diff --git a/pkg/mgrconfig/load.go b/pkg/mgrconfig/load.go
index f02f3c59..c11ee7f7 100644
--- a/pkg/mgrconfig/load.go
+++ b/pkg/mgrconfig/load.go
@@ -58,6 +58,8 @@ func defaultValues() *Config {
 	return &Config{
 		SSHUser:   "root",
 		Cover:     true,
+		Ebpfsig:   false,
+		Covfilter: false,
 		Reproduce: true,
 		Sandbox:   "none",
 		RPC:       ":0",
diff --git a/syz-fuzzer/fuzzer.go b/syz-fuzzer/fuzzer.go
index 5cc7df89..57ce2107 100644
--- a/syz-fuzzer/fuzzer.go
+++ b/syz-fuzzer/fuzzer.go
@@ -115,6 +115,8 @@ func main() {
 		flagPprof   = flag.String("pprof", "", "address to serve pprof profiles")
 		flagTest    = flag.Bool("test", false, "enable image testing mode")      // used by syz-ci
 		flagRunTest = flag.Bool("runtest", false, "enable program testing mode") // used by pkg/runtest
+		flagCovFilter = flag.Bool("covfilter", false, "enable coverage filter")
+		flagEbpfSig   = flag.Bool("ebpfsig", false, "enable ebpf feedback")
 	)
 	flag.Parse()
 	outputType := parseOutputType(*flagOutput)
@@ -130,6 +132,12 @@ func main() {
 		log.Fatalf("failed to create default ipc config: %v", err)
 	}
 	sandbox := ipc.FlagsToSandbox(config.Flags)
+	if *flagCovFilter {
+		config.Flags |= (1 << 15)
+	}
+	if *flagEbpfSig {
+		config.Flags |= (1 << 16)
+	}
 	shutdown := make(chan struct{})
 	osutil.HandleInterrupts(shutdown)
 	go func() {
diff --git a/syz-manager/manager.go b/syz-manager/manager.go
index 0aaee782..2af16686 100644
--- a/syz-manager/manager.go
+++ b/syz-manager/manager.go
@@ -548,7 +548,7 @@ func (mgr *Manager) runInstance(index int) (*Crash, error) {
 	defer atomic.AddUint32(&mgr.numFuzzing, ^uint32(0))
 	cmd := instance.FuzzerCmd(fuzzerBin, executorBin, fmt.Sprintf("vm-%v", index),
 		mgr.cfg.TargetOS, mgr.cfg.TargetArch, fwdAddr, mgr.cfg.Sandbox, procs, fuzzerV,
-		mgr.cfg.Cover, *flagDebug, false, false)
+		mgr.cfg.Cover, *flagDebug, false, false, mgr.cfg.Covfilter, mgr.cfg.Ebpfsig)
 	outc, errc, err := inst.Run(time.Hour, mgr.vmStop, cmd)
 	if err != nil {
 		return nil, fmt.Errorf("failed to run fuzzer: %v", err)
diff --git a/tools/syz-runtest/runtest.go b/tools/syz-runtest/runtest.go
index 538646a2..167ac7d8 100644
--- a/tools/syz-runtest/runtest.go
+++ b/tools/syz-runtest/runtest.go
@@ -175,7 +175,7 @@ func (mgr *Manager) boot(name string, index int) (*report.Report, error) {
 	}
 	cmd := instance.FuzzerCmd(fuzzerBin, executorBin, name,
 		mgr.cfg.TargetOS, mgr.cfg.TargetArch, fwdAddr, mgr.cfg.Sandbox, mgr.cfg.Procs, 0,
-		mgr.cfg.Cover, mgr.debug, false, true)
+		mgr.cfg.Cover, mgr.debug, false, true, false, false)
 	outc, errc, err := inst.Run(time.Hour, mgr.vmStop, cmd)
 	if err != nil {
 		return nil, fmt.Errorf("failed to run fuzzer: %v", err)
-- 
2.20.1

