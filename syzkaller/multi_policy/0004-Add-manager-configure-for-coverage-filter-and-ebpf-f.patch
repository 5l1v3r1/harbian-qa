From 311570e7397ba9413e31425cddced8b57e1a4444 Mon Sep 17 00:00:00 2001
From: Bins94 <kaipeng94@gmail.com>
Date: Wed, 17 Jul 2019 04:23:32 -0400
Subject: [PATCH 4/5] Add manager configure for coverage filter and ebpf
 feedback

---
 executor/executor.cc         | 50 +++++++++++++++++++++---------------
 pkg/instance/instance.go     | 12 ++++-----
 pkg/ipc/ipc.go               |  2 ++
 pkg/mgrconfig/config.go      |  4 +++
 pkg/mgrconfig/load.go        |  2 ++
 syz-fuzzer/fuzzer.go         | 27 ++++++++++++-------
 syz-manager/manager.go       |  2 +-
 tools/syz-runtest/runtest.go |  2 +-
 8 files changed, 63 insertions(+), 38 deletions(-)

diff --git a/executor/executor.cc b/executor/executor.cc
index ffa8ed17..708ddcc6 100644
--- a/executor/executor.cc
+++ b/executor/executor.cc
@@ -124,6 +124,8 @@ static bool flag_enable_net_dev;
 static bool flag_enable_net_reset;
 static bool flag_enable_cgroups;
 static bool flag_enable_close_fds;
+static bool flag_enable_cover_filter;
+static bool flag_enable_ebpf_signal;
 
 static bool flag_collect_cover;
 static bool flag_dedup_cover;
@@ -480,6 +482,8 @@ void parse_env_flags(uint64 flags)
 	flag_enable_net_reset = flags & (1 << 8);
 	flag_enable_cgroups = flags & (1 << 9);
 	flag_enable_close_fds = flags & (1 << 10);
+	flag_enable_cover_filter = flags & (1 << 13);
+	flag_enable_ebpf_signal = flags & (1 << 14);
 }
 
 #if SYZ_EXECUTOR_USES_FORK_SERVER
@@ -890,27 +894,29 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 	char buf[0x11];
 	int ret = 0x11, n = 0;
 	/* Be sure the signal of a syscall is really read */
-	while (ret > 0 || n < 1000) {
-		memset(buf, 0, sizeof(buf));
-		ret = read(monpipe, buf, sizeof(buf));
-		uint32_t sig = 0;
-		uint64_t state = 0;
-		if (ret > 0) {
-			state = strtol(buf, NULL, 16);
-			/* Only for deduplication */
-			sig = hash((state & 0xffffffff) ^ ((state >> 32) & 0xffffffff));
-			if (dedup2(sig))
-				continue;
-			/* state signal start with 0xf
-			 * Write out real state for fuzzer's further handle
-			 */
-			write_output64(state | STATE_SIG_MASK);
-			debug("A state signal %016lx\n", state);
-			n = 0;
-			nsig++;
+	if (flag_enable_ebpf_signal) {
+		while (ret > 0 || n < 1000) {
+			memset(buf, 0, sizeof(buf));
+			ret = read(monpipe, buf, sizeof(buf));
+			uint32_t sig = 0;
+			uint64_t state = 0;
+			if (ret > 0) {
+				state = strtol(buf, NULL, 16);
+				/* Only for deduplication */
+				sig = hash((state & 0xffffffff) ^ ((state >> 32) & 0xffffffff));
+				if (dedup2(sig))
+					continue;
+				/* state signal start with 0xf
+				 * Write out real state for fuzzer's further handle
+				 */
+				write_output64(state | STATE_SIG_MASK);
+				debug("A state signal %016lx\n", state);
+				n = 0;
+				nsig++;
+			}
+			sig = 0;
+			n++;
 		}
-		sig = 0;
-		n++;
 	}
 
 	for (uint32 i = 0; i < cov->size; i++) {
@@ -923,8 +929,10 @@ void write_coverage_signal(cover_t* cov, uint32* signal_count_pos, uint32* cover
 		prev = hash(pc);
 		if (dedup(sig))
 			continue;
-		if (!cover_filter(pc))
+		if (flag_enable_cover_filter && !cover_filter(pc)) {
+			prev = 0;
 			continue;
+		}
 		sig |= 0xe000000000000000;
 		write_output64(sig & COVERAGE_SIG_MASK);
 		nsig++;
diff --git a/pkg/instance/instance.go b/pkg/instance/instance.go
index f46673d4..342b8b59 100644
--- a/pkg/instance/instance.go
+++ b/pkg/instance/instance.go
@@ -293,7 +293,7 @@ func (inst *inst) testInstance() error {
 	}
 
 	cmd := OldFuzzerCmd(fuzzerBin, executorBin, "test", inst.cfg.TargetOS, inst.cfg.TargetArch, fwdAddr,
-		inst.cfg.Sandbox, 0, inst.cfg.Cover, true)
+		inst.cfg.Sandbox, 0, inst.cfg.Cover, true, false, false)
 	outc, errc, err := inst.vm.Run(10*time.Minute, nil, cmd)
 	if err != nil {
 		return fmt.Errorf("failed to run binary in VM: %v", err)
@@ -392,7 +392,7 @@ func (inst *inst) testProgram(command string, testTime time.Duration) error {
 }
 
 func FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs, verbosity int,
-	cover, debug, test, runtest bool) string {
+	cover, debug, test, runtest bool, covfilter bool, ebpfsig bool) string {
 	osArg := ""
 	if OS == "akaros" {
 		// Only akaros needs OS, because the rest assume host OS.
@@ -409,13 +409,13 @@ func FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs,
 		verbosityArg = fmt.Sprintf(" -vv=%v", verbosity)
 	}
 	return fmt.Sprintf("%v -executor=%v -name=%v -arch=%v%v -manager=%v -sandbox=%v"+
-		" -procs=%v -cover=%v -debug=%v -test=%v%v%v",
+		" -procs=%v -cover=%v -debug=%v -test=%v%v%v -covfilter=%v -ebpfsig=%v",
 		fuzzer, executor, name, arch, osArg, fwdAddr, sandbox,
-		procs, cover, debug, test, runtestArg, verbosityArg)
+		procs, cover, debug, test, runtestArg, verbosityArg, covfilter, ebpfsig)
 }
 
-func OldFuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs int, cover, test bool) string {
-	return FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox, procs, 0, cover, false, test, false)
+func OldFuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox string, procs int, cover, test bool, covfilter bool, ebpfsig bool) string {
+	return FuzzerCmd(fuzzer, executor, name, OS, arch, fwdAddr, sandbox, procs, 0, cover, false, test, false, covfilter, ebpfsig)
 }
 
 func ExecprogCmd(execprog, executor, OS, arch, sandbox string, repeat, threaded, collide bool,
diff --git a/pkg/ipc/ipc.go b/pkg/ipc/ipc.go
index dcf8c507..2a7f635a 100644
--- a/pkg/ipc/ipc.go
+++ b/pkg/ipc/ipc.go
@@ -40,6 +40,8 @@ const (
 	// Executor does not know about these:
 	FlagUseShmem      // use shared memory instead of pipes for communication
 	FlagUseForkServer // use extended protocol with handshake
+	FlagCoverFilter   // filter coverage by kernel function address
+	FlagEbpfSignal    // use ebpf feedback as signal
 )
 
 // Per-exec flags for ExecOpts.Flags:
diff --git a/pkg/mgrconfig/config.go b/pkg/mgrconfig/config.go
index 48609d5c..7f1dffe9 100644
--- a/pkg/mgrconfig/config.go
+++ b/pkg/mgrconfig/config.go
@@ -66,6 +66,10 @@ type Config struct {
 
 	// Use KCOV coverage (default: true).
 	Cover bool `json:"cover"`
+	/* Use coverage filter */
+	Covfilter bool `json:"covfilter"`
+	/* Use ebpf feedback */
+	Ebpfsig bool `json:"ebpfsig"`
 	// Reproduce, localize and minimize crashers (default: true).
 	Reproduce bool `json:"reproduce"`
 
diff --git a/pkg/mgrconfig/load.go b/pkg/mgrconfig/load.go
index 1fdcc015..6cbbba31 100644
--- a/pkg/mgrconfig/load.go
+++ b/pkg/mgrconfig/load.go
@@ -58,6 +58,8 @@ func defaultValues() *Config {
 	return &Config{
 		SSHUser:   "root",
 		Cover:     true,
+		Ebpfsig:   false,
+		Covfilter: false,
 		Reproduce: true,
 		Sandbox:   "none",
 		RPC:       ":0",
diff --git a/syz-fuzzer/fuzzer.go b/syz-fuzzer/fuzzer.go
index 22387135..ca64a478 100644
--- a/syz-fuzzer/fuzzer.go
+++ b/syz-fuzzer/fuzzer.go
@@ -96,15 +96,17 @@ func main() {
 	debug.SetGCPercent(50)
 
 	var (
-		flagName    = flag.String("name", "test", "unique name for manager")
-		flagOS      = flag.String("os", runtime.GOOS, "target OS")
-		flagArch    = flag.String("arch", runtime.GOARCH, "target arch")
-		flagManager = flag.String("manager", "", "manager rpc address")
-		flagProcs   = flag.Int("procs", 1, "number of parallel test processes")
-		flagOutput  = flag.String("output", "stdout", "write programs to none/stdout/dmesg/file")
-		flagPprof   = flag.String("pprof", "", "address to serve pprof profiles")
-		flagTest    = flag.Bool("test", false, "enable image testing mode")      // used by syz-ci
-		flagRunTest = flag.Bool("runtest", false, "enable program testing mode") // used by pkg/runtest
+		flagName      = flag.String("name", "test", "unique name for manager")
+		flagOS        = flag.String("os", runtime.GOOS, "target OS")
+		flagArch      = flag.String("arch", runtime.GOARCH, "target arch")
+		flagManager   = flag.String("manager", "", "manager rpc address")
+		flagProcs     = flag.Int("procs", 1, "number of parallel test processes")
+		flagOutput    = flag.String("output", "stdout", "write programs to none/stdout/dmesg/file")
+		flagPprof     = flag.String("pprof", "", "address to serve pprof profiles")
+		flagTest      = flag.Bool("test", false, "enable image testing mode")      // used by syz-ci
+		flagRunTest   = flag.Bool("runtest", false, "enable program testing mode") // used by pkg/runtest
+		flagCovFilter = flag.Bool("covfilter", false, "enable coverage filter")
+		flagEbpfSig   = flag.Bool("ebpfsig", false, "enable ebpf feedback")
 	)
 	flag.Parse()
 	outputType := parseOutputType(*flagOutput)
@@ -120,6 +122,13 @@ func main() {
 		log.Fatalf("failed to create default ipc config: %v", err)
 	}
 	sandbox := ipc.FlagsToSandbox(config.Flags)
+	if *flagCovFilter {
+		config.Flags |= (1 << 13)
+	}
+	if *flagEbpfSig {
+		config.Flags |= (1 << 14)
+	}
+
 	shutdown := make(chan struct{})
 	osutil.HandleInterrupts(shutdown)
 	go func() {
diff --git a/syz-manager/manager.go b/syz-manager/manager.go
index f92b5172..d05167fb 100644
--- a/syz-manager/manager.go
+++ b/syz-manager/manager.go
@@ -546,7 +546,7 @@ func (mgr *Manager) runInstance(index int) (*Crash, error) {
 	defer atomic.AddUint32(&mgr.numFuzzing, ^uint32(0))
 	cmd := instance.FuzzerCmd(fuzzerBin, executorBin, fmt.Sprintf("vm-%v", index),
 		mgr.cfg.TargetOS, mgr.cfg.TargetArch, fwdAddr, mgr.cfg.Sandbox, procs, fuzzerV,
-		mgr.cfg.Cover, *flagDebug, false, false)
+		mgr.cfg.Cover, *flagDebug, false, false, mgr.cfg.Covfilter, mgr.cfg.Ebpfsig)
 	outc, errc, err := inst.Run(time.Hour, mgr.vmStop, cmd)
 	if err != nil {
 		return nil, fmt.Errorf("failed to run fuzzer: %v", err)
diff --git a/tools/syz-runtest/runtest.go b/tools/syz-runtest/runtest.go
index 61b89a80..a0d45937 100644
--- a/tools/syz-runtest/runtest.go
+++ b/tools/syz-runtest/runtest.go
@@ -173,7 +173,7 @@ func (mgr *Manager) boot(name string, index int) (*report.Report, error) {
 	}
 	cmd := instance.FuzzerCmd(fuzzerBin, executorBin, name,
 		mgr.cfg.TargetOS, mgr.cfg.TargetArch, fwdAddr, mgr.cfg.Sandbox, mgr.cfg.Procs, 0,
-		mgr.cfg.Cover, mgr.debug, false, true)
+		mgr.cfg.Cover, mgr.debug, false, true, false, false)
 	outc, errc, err := inst.Run(time.Hour, mgr.vmStop, cmd)
 	if err != nil {
 		return nil, fmt.Errorf("failed to run fuzzer: %v", err)
-- 
2.20.1

